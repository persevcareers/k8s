#creation of pod - imperative,
kubectl run nginx-app --image=nginx --port=80 

#creation of service to expose application running inside pod,  
kubectl expose pod nginx-app --type=NodePort --name=nginx-service --port=80

#creation of service to expose application runnig inside pod with nodeport value
kubectl expose pod nginx-app --type=NodePort --name=webapp-service1 --port=80 --target-port=80 --node-port=32000

#List the pods
kubectl get pods


#List the nodes in the cluster
kubectl get nodes

#List the sevices in the cluster
kubectl get services

#create/update objects using a deployment file,
kubectl create -f nginx-deployment.yaml

kubectl apply -f nginx-deployment.yaml


Creating namespaces:
kubectl create ns <name-namespace>

kubectl apply -f create-namespace.yml
Get ns:
kubectl get ns
Labelling Nodes:
kubectl label nodes node-name  key=value

Unlabelling:
kubectl label nodes node-name  key-

tainting nodes:
kubectl taint nodes node-name  key=value:effect
kubectl taint nodes node-name  node=dev:NoSchedule
kubectl taint nodes node-name  node=dev:PreferNoSchedule
kubectl taint nodes node-name  node=dev:NoExecute

Untainting nodes:
kubectl taint nodes node-name  key=value:effect-

Deployment rollout :
kubectl rollout history deployment <deployment-name>

kubectl rollout status deployment <deployment-name>

kubectl rollout pause deployment <deployment-name>

kubectl rollout resume deployment <deployment-name>

kubectl rollout restart deployment <deployment-name>

kubectl rollout undo deployment <deployment-name> 

kubectl rollout undo deployment <deployment-name> --to-revision=<revision>

ConfigMap:

kubectl create configmap nginx-config –from-literal=key=value
kubectl create configmap nginx-config –from-literal=NGINX-VERSION=1.18.6
kubectl create configmap nginx-config –from-file=dev.config

Secrets:
kubectl create secret generic <secret-name> --from-literal=<key>=<value>

kubectl create secret generic app-secret --from-literal=username=myuser --from-literal=db_password=database_password

kubectl create secret generic <secret-name> --from-file=<path-to-file>

kubectl create secret generic app-secret --from-file=my-secret.txt

Secret - Docker-registry:
kubectl create secret docker-registry <SECRET_NAME> \
  --docker-server=<REGISTRY_SERVER> \
  --docker-username=<REGISTRY_USERNAME> \
  --docker-password=<REGISTRY_PASSWORD> \
  --docker-email=<REGISTRY_EMAIL>
Secret - TLS:
kubectl create secret tls <SECRET_NAME> \
  --cert=<PATH_TO_CERTIFICATE_FILE> \
  --key=<PATH_TO_PRIVATE_KEY_FILE>
